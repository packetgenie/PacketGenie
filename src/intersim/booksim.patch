diff -ruN booksim_orig/booksim2/src/booksim_config.cpp booksim_src_mod/booksim_config.cpp
--- booksim_orig/booksim2/src/booksim_config.cpp	2015-03-17 00:51:54.266206373 -0400
+++ booksim_src_mod/booksim_config.cpp	2015-03-17 00:59:07.607803663 -0400
@@ -196,13 +196,13 @@
 
   // Control assignment of packets to VCs
   _int_map["read_request_begin_vc"] = 0;
-  _int_map["read_request_end_vc"] = 5;
-  _int_map["write_request_begin_vc"] = 2;
-  _int_map["write_request_end_vc"] = 7;
-  _int_map["read_reply_begin_vc"] = 8;
-  _int_map["read_reply_end_vc"] = 13;
-  _int_map["write_reply_begin_vc"] = 10;
-  _int_map["write_reply_end_vc"] = 15;
+  _int_map["read_request_end_vc"] = -1;
+  _int_map["write_request_begin_vc"] = -1;
+  _int_map["write_request_end_vc"] = -1;
+  _int_map["read_reply_begin_vc"] = -1;
+  _int_map["read_reply_end_vc"] = -1;
+  _int_map["write_reply_begin_vc"] = -1;
+  _int_map["write_reply_end_vc"] = -1;
 
   // Control Injection of Packets into Replicated Networks
   _int_map["read_request_subnet"] = 0;
diff -ruN booksim_orig/booksim2/src/config.l booksim_src_mod/config.l
--- booksim_orig/booksim2/src/config.l	2015-03-17 00:51:54.267206395 -0400
+++ booksim_src_mod/config.l	2015-03-17 00:59:07.627804114 -0400
@@ -1,6 +1,3 @@
-%option noinput
-%option nounput
-
 %{
 
 #include <string.h>
diff -ruN booksim_orig/booksim2/src/.gitignore booksim_src_mod/.gitignore
--- booksim_orig/booksim2/src/.gitignore	2015-03-17 00:51:54.263206307 -0400
+++ booksim_src_mod/.gitignore	1969-12-31 19:00:00.000000000 -0500
@@ -1,6 +0,0 @@
-booksim
-lex.yy.c
-y.tab.c
-y.tab.h
-*.o
-*.d
diff -ruN booksim_orig/booksim2/src/globals.hpp booksim_src_mod/globals.hpp
--- booksim_orig/booksim2/src/globals.hpp	2015-03-17 00:51:54.268206417 -0400
+++ booksim_src_mod/globals.hpp	2015-03-17 00:59:07.663804922 -0400
@@ -1,4 +1,4 @@
-// $Id$
+// $Id: globals.hpp 5188 2012-08-30 00:31:31Z dub $
 
 /*
  Copyright (c) 2007-2012, Trustees of The Leland Stanford Junior University
@@ -38,6 +38,9 @@
 class Stats;
 Stats * GetStats(const std::string & name);
 
+class InterconnectInterface;
+extern InterconnectInterface *g_icnt_interface;
+
 extern bool gPrintActivity;
 
 extern int gK;
diff -ruN booksim_orig/booksim2/src/main.cpp booksim_src_mod/main.cpp
--- booksim_orig/booksim2/src/main.cpp	2015-03-17 00:51:54.268206417 -0400
+++ booksim_src_mod/main.cpp	2015-03-17 00:59:07.720806179 -0400
@@ -1,21 +1,21 @@
-// $Id$
+// $Id: main.cpp 5487 2013-02-27 08:16:18Z qtedq $
 
 /*
  Copyright (c) 2007-2012, Trustees of The Leland Stanford Junior University
  All rights reserved.
-
+ 
  Redistribution and use in source and binary forms, with or without
  modification, are permitted provided that the following conditions are met:
-
- Redistributions of source code must retain the above copyright notice, this 
+ 
+ Redistributions of source code must retain the above copyright notice, this
  list of conditions and the following disclaimer.
  Redistributions in binary form must reproduce the above copyright notice, this
  list of conditions and the following disclaimer in the documentation and/or
  other materials provided with the distribution.
-
+ 
  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
- WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE 
+ WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
  ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
@@ -23,7 +23,7 @@
  ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
  SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
-*/
+ */
 
 /*main.cpp
  *
@@ -53,29 +53,47 @@
 #include "network.hpp"
 #include "injection.hpp"
 #include "power_module.hpp"
-
-
+#include "interconnect_interface.hpp"
 
 ///////////////////////////////////////////////////////////////////////////////
 //Global declarations
 //////////////////////
 
- /* the current traffic manager instance */
+// Interconnect Interface instance
+InterconnectInterface *g_icnt_interface;
+
+/* the current traffic manager instance */
 TrafficManager * trafficManager = NULL;
+#if 0
+
+int GetSimTime() {
+    return trafficManager->getTime();
+}
 
+class Stats;
+Stats * GetStats(const std::string & name) {
+    Stats* test =  trafficManager->getStats(name);
+    if(test == 0){
+        cout<<"warning statistics "<<name<<" not found"<<endl;
+    }
+    return test;
+}
+#else
 int GetSimTime() {
-  return trafficManager->getTime();
+  return g_icnt_interface->GetIcntTime();
 }
 
 class Stats;
 Stats * GetStats(const std::string & name) {
-  Stats* test =  trafficManager->getStats(name);
+  Stats* test =  g_icnt_interface->GetIcntStats(name);
   if(test == 0){
     cout<<"warning statistics "<<name<<" not found"<<endl;
   }
   return test;
 }
 
+#endif
+
 /* printing activity factor*/
 bool gPrintActivity;
 
@@ -96,92 +114,96 @@
 
 bool Simulate( BookSimConfig const & config )
 {
-  vector<Network *> net;
-
-  int subnets = config.GetInt("subnets");
-  /*To include a new network, must register the network here
-   *add an else if statement with the name of the network
-   */
-  net.resize(subnets);
-  for (int i = 0; i < subnets; ++i) {
-    ostringstream name;
-    name << "network_" << i;
-    net[i] = Network::New( config, name.str() );
-  }
-
-  /*tcc and characterize are legacy
-   *not sure how to use them 
-   */
-
-  assert(trafficManager == NULL);
-  trafficManager = TrafficManager::New( config, net ) ;
-
-  /*Start the simulation run
-   */
-
-  double total_time; /* Amount of time we've run */
-  struct timeval start_time, end_time; /* Time before/after user code */
-  total_time = 0.0;
-  gettimeofday(&start_time, NULL);
-
-  bool result = trafficManager->Run() ;
-
-
-  gettimeofday(&end_time, NULL);
-  total_time = ((double)(end_time.tv_sec) + (double)(end_time.tv_usec)/1000000.0)
-            - ((double)(start_time.tv_sec) + (double)(start_time.tv_usec)/1000000.0);
-
-  cout<<"Total run time "<<total_time<<endl;
-
-  for (int i=0; i<subnets; ++i) {
-
-    ///Power analysis
-    if(config.GetInt("sim_power") > 0){
-      Power_Module pnet(net[i], config);
-      pnet.run();
+    vector<Network *> net;
+    
+    int subnets = config.GetInt("subnets");
+    /*To include a new network, must register the network here
+     *add an else if statement with the name of the network
+     */
+    net.resize(subnets);
+    for (int i = 0; i < subnets; ++i) {
+        ostringstream name;
+        name << "network_" << i;
+        net[i] = Network::New( config, name.str() );
     }
-
-    delete net[i];
-  }
-
-  delete trafficManager;
-  trafficManager = NULL;
-
-  return result;
+    
+    /*tcc and characterize are legacy
+     *not sure how to use them
+     */
+    
+    assert(trafficManager == NULL);
+    trafficManager = TrafficManager::New( config, net ) ;
+    
+    /*Start the simulation run
+     */
+    
+    double total_time; /* Amount of time we've run */
+    struct timeval start_time, end_time; /* Time before/after user code */
+    total_time = 0.0;
+    gettimeofday(&start_time, NULL);
+    
+    bool result = trafficManager->Run() ;
+    
+    
+    gettimeofday(&end_time, NULL);
+    total_time = ((double)(end_time.tv_sec) + (double)(end_time.tv_usec)/1000000.0)
+    - ((double)(start_time.tv_sec) + (double)(start_time.tv_usec)/1000000.0);
+    
+    cout<<"Total run time "<<total_time<<endl;
+    
+    for (int i=0; i<subnets; ++i) {
+        
+        ///Power analysis
+        if(config.GetInt("sim_power") > 0){
+            Power_Module pnet(net[i], config);
+            pnet.run();
+        }
+        
+        delete net[i];
+    }
+    
+    delete trafficManager;
+    trafficManager = NULL;
+    
+    return result;
 }
 
+#ifdef CREATE_LIBRARY
 
+#else
 int main( int argc, char **argv )
 {
-
-  BookSimConfig config;
-
-
-  if ( !ParseArgs( &config, argc, argv ) ) {
-    cerr << "Usage: " << argv[0] << " configfile... [param=value...]" << endl;
-    return 0;
- } 
-
-  
-  /*initialize routing, traffic, injection functions
-   */
-  InitializeRoutingMap( config );
-
-  gPrintActivity = (config.GetInt("print_activity") > 0);
-  gTrace = (config.GetInt("viewer_trace") > 0);
-  
-  string watch_out_file = config.GetStr( "watch_out" );
-  if(watch_out_file == "") {
-    gWatchOut = NULL;
-  } else if(watch_out_file == "-") {
-    gWatchOut = &cout;
-  } else {
-    gWatchOut = new ofstream(watch_out_file.c_str());
-  }
-  
-
-  /*configure and run the simulator
-   */
-  bool result = Simulate( config );
-  return result ? -1 : 0;
+    
+    BookSimConfig config;
+    
+    
+    if ( !ParseArgs( &config, argc, argv ) ) {
+        cerr << "Usage: " << argv[0] << " configfile... [param=value...]" << endl;
+        return 0;
+    }
+    
+    
+    /*initialize routing, traffic, injection functions
+     */
+    InitializeRoutingMap( config );
+    
+    gPrintActivity = (config.GetInt("print_activity") > 0);
+    gTrace = (config.GetInt("viewer_trace") > 0);
+    
+    string watch_out_file = config.GetStr( "watch_out" );
+    if(watch_out_file == "") {
+        gWatchOut = NULL;
+    } else if(watch_out_file == "-") {
+        gWatchOut = &cout;
+    } else {
+        gWatchOut = new ofstream(watch_out_file.c_str());
+    }
+    
+    
+    /*configure and run the simulator
+     */
+    bool result = Simulate( config );
+    return result ? -1 : 0;
 }
+#endif
+
diff -ruN booksim_orig/booksim2/src/Makefile booksim_src_mod/Makefile
--- booksim_orig/booksim2/src/Makefile	2015-03-17 00:51:54.263206307 -0400
+++ booksim_src_mod/Makefile	2015-03-17 00:59:07.720806179 -0400
@@ -24,64 +24,155 @@
 # ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 # POSSIBILITY OF SUCH DAMAGE.
 
+#
+# Makefile
+#
+CXX = g++
+CC = gcc
+CREATE_LIBRARY ?= 0
+INTERFACE = interconnect_interface.cpp
+DEBUG ?= 0
+
 LEX = flex
 YACC   = bison -y
-DEFINE = 
+DEFINE = #-DTRACK_STALLS -DTRACK_BUFFERS -DTRACK_FLOWS -DTRACK_CREDITS
 INCPATH = -I. -Iarbiters -Iallocators -Irouters -Inetworks -Ipower
+
+ifeq ($(CREATE_LIBRARY),1)
+INCPATH += -I$(GPGPUSIM_ROOT)/src/gpgpu-sim/
+endif
+
 CPPFLAGS += -Wall $(INCPATH) $(DEFINE)
+ifneq ($(DEBUG),1)
 CPPFLAGS += -O3
+endif
 CPPFLAGS += -g
+CPPFLAGS += -fPIC
 LFLAGS +=
 
-PROG := booksim
 
-# simulator source files
-CPP_SRCS = $(wildcard *.cpp) $(wildcard */*.cpp)
-CPP_HDRS = $(wildcard *.hpp) $(wildcard */*.hpp)
-CPP_DEPS = $(CPP_SRCS:.cpp=.d)
-CPP_OBJS = $(CPP_SRCS:.cpp=.o)
-
-LEX_SRCS = lex.yy.c
-LEX_OBJS = lex.yy.o
-
-YACC_SRCS = y.tab.c
-YACC_HDRS = y.tab.h
-YACC_OBJS = y.tab.o
+ifeq ($(BOOKSIM_OBJDIR),)
+OBJDIR := obj
+else
+OBJDIR := $(BOOKSIM_OBJDIR)
+endif
+PROG   := booksim
 
-OBJS :=  $(CPP_OBJS) $(LEX_OBJS) $(YACC_OBJS)
+# simulator source files
+CPP_SRCS =  \
+   config_utils.cpp \
+   random_utils.cpp \
+   booksim_config.cpp \
+   module.cpp \
+   buffer.cpp \
+   vc.cpp \
+   routefunc.cpp \
+   traffic.cpp \
+   flitchannel.cpp \
+   trafficmanager.cpp \
+   batchtrafficmanager.cpp \
+   packet_reply_info.cpp \
+   buffer_state.cpp \
+   stats.cpp \
+   credit.cpp \
+   outputset.cpp \
+   flit.cpp \
+   injection.cpp\
+   misc_utils.cpp\
+   rng_wrapper.cpp\
+   rng_double_wrapper.cpp\
+   power_module.cpp \
+   switch_monitor.cpp \
+   buffer_monitor.cpp \
+   main.cpp \
+   noctrafficmanager.cpp \
+   interconnect_interface.cpp \
+   intersim_config.cpp
+
+ifeq ($(CREATE_LIBRARY),1)
+CPP_SRCS += $(INTERFACE)
+DEFINE += -DCREATE_LIBRARY
+endif
+
+
+LEX_OBJS  = ${OBJDIR}/lex.yy.o
+YACC_OBJS = ${OBJDIR}/y.tab.o
+
+# networks 
+NETWORKS:= $(wildcard networks/*.cpp) 
+ALLOCATORS:= $(wildcard allocators/*.cpp)
+ARBITERS:= $(wildcard arbiters/*.cpp)
+ROUTERS:= $(wildcard routers/*.cpp)
+POWER:= $(wildcard power/*.cpp)
+
+#--- Make rules ---
+OBJS :=  $(LEX_OBJS) $(YACC_OBJS)\
+ $(CPP_SRCS:%.cpp=${OBJDIR}/%.o)\
+ $(NETWORKS:networks/%.cpp=${OBJDIR}/%.o)\
+ $(ALLOCATORS:allocators/%.cpp=${OBJDIR}/%.o)\
+ $(ARBITERS:arbiters/%.cpp=${OBJDIR}/%.o)\
+ $(ROUTERS:routers/%.cpp=${OBJDIR}/%.o)\
+ $(POWER:power/%.cpp=${OBJDIR}/%.o)
 
 .PHONY: clean
 
-all: $(PROG)
+ifeq ($(CREATE_LIBRARY),1)
+all: $(OBJS)
+else
+all:$(PROG)
 
 $(PROG): $(OBJS)
 	 $(CXX) $(LFLAGS) $^ -o $@
+endif
 
-$(LEX_SRCS): config.l
-	$(LEX) $<
+# rules to compile simulator
 
-$(YACC_SRCS) $(YACC_HDRS): config.y
-	$(YACC) -d $<
 
-$(LEX_OBJS): $(LEX_SRCS) $(YACC_HDRS)
+${LEX_OBJS}: lex.yy.c y.tab.h
 	$(CC) $(CPPFLAGS) -c $< -o $@
 
-$(YACC_OBJS): $(YACC_SRCS)
+${YACC_OBJS}: y.tab.c y.tab.h
 	$(CC) $(CPPFLAGS) -c $< -o $@
 
-%.o: %.cpp
-	$(CXX) $(CPPFLAGS) -MMD -c $< -o $@
+${OBJDIR}/%.o: %.cpp 
+	$(CXX) $(CPPFLAGS) -c $< -o $@
+
+# rules to compile networks
+${OBJDIR}/%.o: networks/%.cpp 
+	$(CXX) $(CPPFLAGS) -c $< -o $@
+
+# rules to compile arbiters
+${OBJDIR}/%.o: arbiters/%.cpp 
+	$(CXX) $(CPPFLAGS) -c $< -o $@
+
+# rules to compile allocators
+${OBJDIR}/%.o: allocators/%.cpp 
+	$(CXX) $(CPPFLAGS) -c $< -o $@
+
+# rules to compile routers
+${OBJDIR}/%.o: routers/%.cpp 
+	$(CXX) $(CPPFLAGS) -c $< -o $@
+
+# rules to compile power classes
+${OBJDIR}/%.o: power/%.cpp
+	$(CXX) $(CPPFLAGS) -c $< -o $@
 
 clean:
-	rm -f $(YACC_SRCS) $(YACC_HDRS)
-	rm -f $(LEX_SRCS)
-	rm -f $(CPP_DEPS)
-	rm -f $(OBJS)
+	rm -f $(OBJS) 
 	rm -f $(PROG)
+	rm -f *~
+	rm -f allocators/*~
+	rm -f arbiters/*~
+	rm -f networks/*~
+	rm -f runfiles/*~
+	rm -f routers/*~
+	rm -f examples/*~
+	rm -f y.tab.c y.tab.h lex.yy.c
+	rm -f moc_bgui.cpp
 
-distclean: clean
-	rm -f *~ */*~
-	rm -f *.o */*.o
-	rm -f *.d */*.d
+y.tab.c y.tab.h: config.y
+	$(YACC) -d $<
 
--include $(CPP_DEPS)
+lex.yy.c: config.l
+	$(LEX) $<
+# DO NOT DELETE
diff -ruN booksim_orig/booksim2/src/networks/anynet.cpp booksim_src_mod/networks/anynet.cpp
--- booksim_orig/booksim2/src/networks/anynet.cpp	2015-03-17 00:51:54.269206439 -0400
+++ booksim_src_mod/networks/anynet.cpp	2015-03-17 00:59:07.746806757 -0400
@@ -478,11 +478,11 @@
 
   }
 
-  //map verification, make sure the information contained in both maps
+  //map verification, make sure the information contained in bother maps
   //are the same
   assert(router_list[0].size() == router_list[1].size());
 
-  //traffic generator assumes node list is sequential and starts at 0
+  //traffic generator assumes node list is sequenctial and starts at 0
   vector<int> node_check;
   for(map<int,int>::iterator i = node_list.begin();
       i!=node_list.end();
@@ -491,7 +491,7 @@
   }
   sort(node_check.begin(), node_check.end());
   for(size_t i = 0; i<node_check.size(); i++){
-    if((size_t)node_check[i] != i){
+    if(node_check[i] != i){
       cout<<"Anynet:booksim trafficmanager assumes sequential node numbering starting at 0\n";
       assert(false);
     }
diff -ruN booksim_orig/booksim2/src/networks/dragonfly.cpp booksim_src_mod/networks/dragonfly.cpp
--- booksim_orig/booksim2/src/networks/dragonfly.cpp	2015-03-17 00:51:54.269206439 -0400
+++ booksim_src_mod/networks/dragonfly.cpp	2015-03-17 00:59:07.739806602 -0400
@@ -111,6 +111,7 @@
   int dest_grp_ID = int(dest/_grp_num_nodes);
   int grp_output=-1;
   int grp_RID=-1;
+  int group_dest=-1;
   
   //which router within this group the packet needs to go to
   if (dest_grp_ID == grp_ID) {
@@ -122,6 +123,7 @@
       grp_output = dest_grp_ID - 1;
     }
     grp_RID = int(grp_output /gP) + grp_ID * _grp_num_routers;
+    group_dest = grp_RID * gP;
   }
 
   //At the last hop
@@ -219,6 +221,7 @@
   int _input=-1;
   int _dim_ID=-1;
   int _num_ports_per_switch=-1;
+  int _dim_size=-1;
   int c;
 
   ostringstream router_name;
@@ -311,6 +314,8 @@
     // intra-group GROUP channels
     for ( int dim = 0; dim < _n; ++dim ) {
 
+      _dim_size = powi(_k,dim);
+
       _dim_ID = ((int) (node / ( powi(_p, dim))));
 
 
@@ -351,12 +356,17 @@
 
 
     // add INPUT channels -- "optical" channels connecting the groups
+    int _grp_num_routers;
     int grp_output;
+    int grp_ID2;
 
     for ( int cnt = 0; cnt < _p; ++cnt ) {
       //	   _dim_ID
       grp_output = _dim_ID* _p + cnt;
 
+      _grp_num_routers = powi(_k, _n-1);
+      grp_ID2 = (int) ((grp_ID - 1) / (_k - 1));
+
       if ( grp_ID > grp_output)   {
 
 	_input = (grp_output) * _num_ports_per_switch * _a    +   		// starting point of group
@@ -485,8 +495,8 @@
   int debug = f->watch;
   int out_port = -1;
   int out_vc = 0;
-  int min_queue_size;
-  int nonmin_queue_size;
+  int min_queue_size, min_hopcnt;
+  int nonmin_queue_size, nonmin_hopcnt;
   int intm_grp_ID;
   int intm_rID;
 
@@ -513,10 +523,13 @@
 	f->ph = 1;
       } else {
 	//congestion metrics using queue length, obtained by GetUsedCredit()
+	min_hopcnt = dragonflynew_hopcnt(f->src, f->dest);
 	min_router_output = dragonfly_port(rID, f->src, f->dest); 
       	min_queue_size = max(r->GetUsedCredit(min_router_output), 0) ; 
 
       
+	nonmin_hopcnt = dragonflynew_hopcnt(f->src, f->intm) +
+	  dragonflynew_hopcnt(f->intm,f->dest);
 	nonmin_router_output = dragonfly_port(rID, f->src, f->intm);
 	nonmin_queue_size = max(r->GetUsedCredit(nonmin_router_output), 0);
 
diff -ruN booksim_orig/booksim2/src/networks/flatfly_onchip.cpp booksim_src_mod/networks/flatfly_onchip.cpp
--- booksim_orig/booksim2/src/networks/flatfly_onchip.cpp	2015-03-17 00:51:54.270206461 -0400
+++ booksim_src_mod/networks/flatfly_onchip.cpp	2015-03-17 00:59:07.744806712 -0400
@@ -1204,17 +1204,19 @@
 int find_distance (int src, int dest) {
   int dist = 0;
   int _dim   = gN;
+  int _dim_size;
   
   int src_tmp= (int) src / gC;
   int dest_tmp = (int) dest / gC;
+  int src_id, dest_id;
   
   //  cout << " HOP CNT between  src: " << src << " dest: " << dest;
   for (int d=0;d < _dim; d++) {
-    //int _dim_size = powi(gK, d )*gC;
+    _dim_size = powi(gK, d )*gC;
     //if ((int)(src / _dim_size) !=  (int)(dest / _dim_size))
     //   dist++;
-    int src_id = src_tmp % gK;
-    int dest_id = dest_tmp % gK;
+    src_id = src_tmp % gK;
+    dest_id = dest_tmp % gK;
     if (src_id !=  dest_id)
       dist++;
     src_tmp = (int) (src_tmp / gK);
diff -ruN booksim_orig/booksim2/src/networks/kncube.cpp booksim_src_mod/networks/kncube.cpp
--- booksim_orig/booksim2/src/networks/kncube.cpp	2015-03-17 00:51:54.270206461 -0400
+++ booksim_src_mod/networks/kncube.cpp	2015-03-17 00:59:07.739806602 -0400
@@ -34,8 +34,6 @@
 #include "booksim.hpp"
 #include <vector>
 #include <sstream>
-#include <ctime>
-#include <cassert>
 #include "kncube.hpp"
 #include "random_utils.hpp"
 #include "misc_utils.hpp"
@@ -227,7 +225,7 @@
   return _k;
 }
 
-/*legacy, not sure how this fits into the new scheme of things*/
+/*legacy, not sure how this fits into the own scheme of things*/
 void KNCube::InsertRandomFaults( const Configuration &config )
 {
   int num_fails = config.GetInt( "link_failures" );
@@ -270,12 +268,11 @@
     for ( int i = 0; i < num_fails; ++i ) {
       int j = RandomInt( _size - 1 );
       bool available = false;
-      int node = -1;
-      int chan = -1;
+      int node, chan;
       int t;
 
       for ( t = 0; ( t < _size ) && (!available); ++t ) {
-	int node = ( j + t ) % _size;
+	node = ( j + t ) % _size;
        
 	if ( !fail_nodes[node] ) {
 	  // check neighbors
@@ -301,8 +298,7 @@
 	Error( "Could not find another possible fault channel" );
       }
 
-      assert(node != -1);
-      assert(chan != -1);
+      
       OutChannelFault( node, chan );
       fail_nodes[node] = true;
 
diff -ruN booksim_orig/booksim2/src/networks/qtree.cpp booksim_src_mod/networks/qtree.cpp
--- booksim_orig/booksim2/src/networks/qtree.cpp	2015-03-17 00:51:54.270206461 -0400
+++ booksim_src_mod/networks/qtree.cpp	2015-03-17 00:59:07.736806536 -0400
@@ -82,27 +82,31 @@
 
 void QTree::_BuildNet( const Configuration& config )
 {
-  for (int h = 0; h < _n; h++) {
-    for (int pos = 0 ; pos < powi( _k, h ) ; ++pos ) {
+
+  ostringstream routerName;
+  int h, r, pos, port;
+
+  for (h = 0; h < _n; h++) {
+    for (pos = 0 ; pos < powi( _k, h ) ; ++pos ) {
       
       int id = h * 256 + pos;  
-      int r = _RouterIndex( h, pos );
+      r = _RouterIndex( h, pos );
 
-      ostringstream routerName("router_");
-      routerName << h << "_" << pos;
+      routerName << "router_" << h << "_" << pos;
 
       int d = ( h == 0 ) ? _k : _k + 1;
       _routers[r] = Router::NewRouter( config, this,
 				       routerName.str( ),
 				       id, d, d);
       _timed_modules.push_back(_routers[r]);
+      routerName.str("");
     }
   }
   
   // Injection & Ejection Channels
-  for ( int pos = 0 ; pos < powi( _k, _n-1 ) ; ++pos ) {
-    int r = _RouterIndex( _n-1, pos );
-    for ( int port = 0 ; port < _k ; port++ ) {
+  for ( pos = 0 ; pos < powi( _k, _n-1 ) ; ++pos ) {
+    r = _RouterIndex( _n-1, pos );
+    for ( port = 0 ; port < _k ; port++ ) {
 
       _routers[r]->AddInputChannel( _inject[_k*pos+port],
 				    _inject_cred[_k*pos+port]);
@@ -112,14 +116,12 @@
     }
   }
 
-  for ( int h = 0 ; h < _n ; ++h ) {
-    for ( int pos = 0 ; pos < powi( _k, h ) ; ++pos ) {
-
-      int r = _RouterIndex( h, pos );
-
-      int c;
+  int c;
+  for ( h = 0 ; h < _n ; ++h ) {
+    for ( pos = 0 ; pos < powi( _k, h ) ; ++pos ) {
+      for ( port = 0 ; port < _k ; port++ ) {
 
-      for ( int port = 0 ; port < _k ; port++ ) {
+	r = _RouterIndex( h, pos );
 
 	if ( h < _n-1 ) {
 	  // Channels to Children Nodes
diff -ruN booksim_orig/booksim2/src/networks/tree4.cpp booksim_src_mod/networks/tree4.cpp
--- booksim_orig/booksim2/src/networks/tree4.cpp	2015-03-17 00:51:54.271206483 -0400
+++ booksim_src_mod/networks/tree4.cpp	2015-03-17 00:59:07.727806336 -0400
@@ -227,7 +227,7 @@
 {
   int heightChild, heightParent, posChild, posParent;
 
-  int L = -1;
+  int L;
 
   if (height1 < height2) {
     heightChild  = height2;
@@ -285,6 +285,5 @@
       case 3: L =_length_d1_d0_0; break;
       }
   }
-  assert(L != -1);
   return L;
 }
diff -ruN booksim_orig/booksim2/src/traffic.cpp booksim_src_mod/traffic.cpp
--- booksim_orig/booksim2/src/traffic.cpp	2015-03-17 00:51:54.274206549 -0400
+++ booksim_src_mod/traffic.cpp	2015-03-17 00:59:07.832808664 -0400
@@ -27,7 +27,6 @@
 
 #include <iostream>
 #include <sstream>
-#include <ctime>
 #include "random_utils.hpp"
 #include "traffic.hpp"
 
diff -ruN booksim_orig/booksim2/src/trafficmanager.cpp booksim_src_mod/trafficmanager.cpp
--- booksim_orig/booksim2/src/trafficmanager.cpp	2015-03-17 00:51:54.275206571 -0400
+++ booksim_src_mod/trafficmanager.cpp	2015-03-17 00:59:07.856809193 -0400
@@ -30,7 +30,6 @@
 #include <fstream>
 #include <limits>
 #include <cstdlib>
-#include <ctime>
 
 #include "booksim.hpp"
 #include "booksim_config.hpp"
@@ -40,6 +39,8 @@
 #include "vc.hpp"
 #include "packet_reply_info.hpp"
 
+#include "noctrafficmanager.hpp"
+
 TrafficManager * TrafficManager::New(Configuration const & config,
                                      vector<Network *> const & net)
 {
@@ -49,6 +50,8 @@
         result = new TrafficManager(config, net);
     } else if(sim_type == "batch") {
         result = new BatchTrafficManager(config, net);
+    } else if(sim_type == "noc") {
+        result = new NoCTrafficManager(config, net);
     } else {
         cerr << "Unknown simulation type: " << sim_type << endl;
     } 
diff -ruN booksim_orig/booksim2/src/trafficmanager.hpp booksim_src_mod/trafficmanager.hpp
--- booksim_orig/booksim2/src/trafficmanager.hpp	2015-03-17 00:51:54.275206571 -0400
+++ booksim_src_mod/trafficmanager.hpp	2015-03-17 00:59:07.871809524 -0400
@@ -265,12 +265,12 @@
   virtual void _RetireFlit( Flit *f, int dest );
 
   void _Inject();
-  void _Step( );
+  virtual void _Step( );
 
   bool _PacketsOutstanding( ) const;
   
   virtual int  _IssuePacket( int source, int cl );
-  void _GeneratePacket( int source, int size, int cl, int time );
+  virtual void _GeneratePacket( int source, int size, int cl, int time );
 
   virtual void _ClearStats( );
 
