# Given the following 3x3 network:
#        0 1 2
#        3 4 5
#        6 7 8
# compute nodes are 0, 2, 4, 6, 8
# memory nodes are 1, 3, 5, 7
# The injection is as follows:
#    uniform fixed injection of write packets for
#             (0,2,4,6,8) -> (1,3,5,7)
#    periodic "burst" injection of read packets with fixed reply for
#             (0,2) -> (1,3,5,7)
#    periodic "gaussian" injection of read packets with probablistic reply for
#             (6,8) -> (1,3,5,7)
#    state-based "OnOff" injection of long_write packets for
#             (4)   -> (1,3,5,7)

-topology_type mesh 3 3
-traffic_pattern tp0 uniform 

# Specify injection rate of the traffic for a specified set of nodes 
# in the network.
#   - Injection rate is in units of "packets per cycle" (per node).
#                -traffic_inj_rate [name] [type] [params] 
#   - Supported types:
#  uniform: [injection_rate]
#  burst: [period] [dut_cycle] [start_low] [rate_base] [rate_high]
#     note: [start_low] can be "low", "L", or "high", "H"
#  gaussian: [period] [start_offset] [peak_inj_rate] [std_dev]
#  onoff: [alpha] [beta] [r1] [initial_state]
#     note: [initial_state] are "all_on", "all_off" and "random"
#
-traffic_inj_process inj_unifm uniform 0.02
-traffic_inj_process inj_burst burst 20 0.2 high 0 0.2
-traffic_inj_process inj_gauss gaussian 20 10 0.4 0.5
-traffic_inj_process inj_onoff onoff 0.1 0.9 1.0 all_off

# Specify sender and receiver nodes:
#
-traffic_senders compute_all { EVEN }
-traffic_senders compute_0 { 0 2 }
-traffic_senders compute_1 { 6 8 }
-traffic_senders compute_2 { 4 }
-traffic_receivers memory { 1 3 5 7 }

# Specify different packet types:
#         -packet_type <name> <size> <weight> <reply?> <reply-packet>
-packet_type write 64 1.0 0
-packet_type write_long 128 1.0 0
-packet_type read_rqst_fixed 8 2.0 1 read_reply_fixed
-packet_type read_rqst_erlang 8 2.0 1 read_reply_erlang


# Specify delay for how many cycles the node should wait before sending a response(?)
# reply packet is generated (1 + delay) cycles after the request. 
#         -packet_type_reply [name] [type] [params]
# - Supported types: (and their [params] field)
# fixed:  [size] [delay]
# erlang: [size] [arrival_rate] [service_time]
#        NOTE: arrival_rate*service_time < 1
# Examples:
-packet_type_reply read_reply_fixed fixed 64 4
-packet_type_reply read_reply_erlang erlang 64 0.15 5


# Specify node group.
#         -network_group <name> <inj_process> <traf_pattern> <receivers> <node idxes> <packets>
#
# Replace <inj_process> with a different injection process for different behavior.
-node_group uniform_writes inj_unifm tp0 compute_all memory < write >
-node_group fixed_read inj_burst tp0 compute_0 memory < read_rqst_fixed >
-node_group erlang_read inj_gauss tp0 compute_1 memory < read_rqst_erlang >
-node_group long_write inj_onoff tp0 compute_2 memory < write_long >

-simclk_step 1 
-simclk_end 100
-wait_for_replies 

